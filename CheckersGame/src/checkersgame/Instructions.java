/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package checkersgame;

/**
 *
 * @author caydenferguson
 */
public class Instructions extends javax.swing.JFrame {

    /**
     * Creates new form Instructions
     */
    public Instructions() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextPane1.setEditable(false);
        jTextPane1.setText("Object: \n----------\nEliminate all your opponents pieces, or make them “Give Up”.\n\nGameplay: \n----------\nPress play - red player goes first, and play will alternate back and forth between them. On your turn, make a move (see “Making a move” below), this move must not be on top of your own piece and must be towards your opponents starting side. Try and eliminate (See “Eliminating” below) your opponents pieces whenever possible, but be strategic and think ahead - otherwise you might end up losing your own piece right after. When a player wins (See “Winning” below) a point will be added to their respective score in the bottom right of the screen. A new game will be started, and play will begin normally.\n\nMaking a move:\n----------\nThere are 2 stages to moving a piece, starting with the selection stage and then the placement/move stage. During the selection stage, choose a piece of your own colour to move. This piece must be able to move, meaning: there can not be pieces on all four of its adjacent corners - unless an elimination is possible (see “Eliminating” below). Once a piece is chosen the placement/move stage has begun. Now choose an open dark tile directly adjacent to your selected piece to make it move there - this move must be toward your opponents starting side unless your piece is a king (see “Kings” below). Now your turn is complete and play switches to the other player and they will begin with the selection stage.\n\nEliminating:\n----------\nEliminating a piece means taking it out of play. This is how you achieve your main objective in the game - to eliminate all of your opponents pieces. To eliminate, during the second phase of your turn choose a tile adjacent to you that has an opponent's piece on it. If there is an open space behind and adjacent to the opponent's piece in same direction you chose to move (if your black, you move either up and right or up and left - the opposite is true for red.), then you can eliminate this piece. If you choose to do so, the piece you wanted to eliminate will be removed from play and you will take the spot back and adjacent to it, that was verified to be open earlier. Play then moves to the next player.\n\nKings:\n----------\nA piece becomes a king when it reaches the opposite side of the game board that it started on. When a piece is kinged it can move any direction - not just in that of their opponents starting side (so long as it's on a dark tile). This is the most powerful piece in the game - use it strategically.\n not just in that of their opponents starting side (so long as it's on a dark tile). This is the most powerful piece in the game - use it strategically.\n\nWinning:\n----------\nThere are two ways to win, either by being the first player to eliminate all the opponents pieces, or if your opponent “Gives Up”. If they “Give up”, they will choose the button in the bottom right. This will give the appropriate player a point and a new game will start.\n\n\n\n\n\n");
        jScrollPane1.setViewportView(jTextPane1);

        jLabel1.setFont(new java.awt.Font("Silom", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("How to play Retro Checkers");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Instructions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Instructions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Instructions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Instructions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Instructions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
